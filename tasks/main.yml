---
- include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'           # CentOS-6.5
        - '{{ ansible_os_family }}-{{ ansible_distribution_version }}.yml'              # RedHat-6.5
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'     # CentOS-6
        - '{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml'        # RedHat-6
      paths: '../vars'

- name: Install yum repository rpms
  yum:
    name: '{{ item }}'
    state: present
  with_items: yum_repo_rpms
  when: ansible_os_family == 'RedHat' and bundled|bool == False

- name: Determine if rhui repository exists
  stat:
    path: '{{ redhat_rhui_repo_path }}'
  changed_when: false
  register: rhui_repo

- name: Update rh-amazon-rhui-client (RHEL EC2 only)
  yum: name=rh-amazon-rhui-client state=latest
  when: ansible_distribution == 'RedHat' and rhui_repo.stat.exists

- name: enable rhui repositories
  ini_file:
    dest: '{{ redhat_rhui_repo_path }}'
    section: '{{ item }}'
    option: enabled
    value: 1
  when: ansible_distribution == 'RedHat' and rhui_repo.stat.exists
  with_items: redhat_rhui_repos

- name: Determine if rhsm repository exists
  stat:
    path: '{{ redhat_rhsm_repo_path }}'
  changed_when: false
  register: rhsm_repo
  when: ansible_os_family == 'RedHat'

- name: Determine if rhsm system cert exists
  stat:
    path: '{{ redhat_rhsm_cert_path }}'
  changed_when: false
  register: rhsm_cert
  when: ansible_os_family == 'RedHat'

- name: Enable rhsm repositories
  command: subscription-manager repos --enable '{{ item }}'
  when: ansible_distribution == 'RedHat' and rhsm_repo.stat.exists and rhsm_cert.stat.exists
  with_items: redhat_rhsm_repos

- name: Install playbook dependencies (RedHat)
  yum:
    name: '{{ item }}'
    state: installed
  with_items: el_dependencies
  when: ansible_os_family == 'RedHat'

- name: Install yum repositories
  get_url:
    dest: /etc/yum.repos.d/
    url: '{{ item }}'
  when: yum_repo_urls is defined
  with_items: yum_repo_urls
  when: ansible_os_family == 'RedHat' and bundled|bool == False

- name: Install mongo (RedHat)
  yum:
    name: '{{ item }}'
    state: installed
  with_items: mongodb_rpm_packages
  when: ansible_os_family == 'RedHat'

- name: Fix mongo init script on RedHat family 6
  lineinfile: dest=/etc/init.d/mongod regexp='^\s*local pid=' line='  local pid=`pidof ${procname}`'
  when: ansible_os_family == 'RedHat' and (ansible_distribution_version|version_compare('6', '>=') and ansible_distribution_version|version_compare('7', '<'))

- name: Install mongo (Ubuntu)
  apt:
    name: '{{ item }}'
    state: installed
  with_items: mongodb_deb_packages
  when: ansible_os_family == 'Debian'

- name: Enable and start mongo service
  service:
    name: mongod
    enabled: yes
    state: running

- name: Setup mongo keyfile
  include: keyfile.yml

- name: Install mongod configuration
  template:
    src: 'mongod.conf.j2'
    dest: '/etc/mongod.conf'
    mode: '0644'
    owner: 'root'
    group: 'root'
  notify: restart mongo

- name: Create mongo superuser
  mongodb_user:
    name: '{{ install_mongod_admin_username }}'
    password: '{{ install_mongod_admin_password }}'
    database: 'admin'
    roles: 'root'
    state: present
  run_once: true

- name: Create mongo tower user
  mongodb_user:
    name: '{{ install_mongod_user_username }}'
    login_user: '{{ install_mongod_admin_username }}'
    login_password: '{{ install_mongod_admin_password }}'
    password: '{{ install_mongod_user_password }}'
    database: '{{ install_mongod_user_database }}'
    roles: 'readWrite'
    state: present
  run_once: true

- meta: flush_handlers

- name: Check for replication set status
  command:
    /usr/bin/mongo -u {{ install_mongod_admin_username }} -p {{ install_mongod_admin_password }} admin --eval 'printjson(rs.conf())'
  register: replcheck
  run_once: true
  changed_when: false
  ignore_errors: true
  tags: registerit

- name: Replication init data-structure
  set_fact:
    mongod_replication_struct:
      _id: "tower"
      members:
        - _id: 0
          host: "{{ inventory_hostname }}"

- name: Initialise replication set
  command:
    /usr/bin/mongo -u {{ install_mongod_admin_username }} -p {{ install_mongod_admin_password }} admin --eval 'rs.initiate({{ mongod_replication_struct | to_json }})'
  run_once: true
  when: install_mongod_replset != ''
  changed_when: '"_id" not in replcheck.stdout'
  register: initialise

- name: Wait a moment for the RS to initialise
  pause:
    seconds: 2
  when: initialise|changed

- name: Add secondaries to replication set
  command:
    /usr/bin/mongo -u {{ install_mongod_admin_username }} -p {{ install_mongod_admin_password }} admin --eval 'rs.add("{{ item }}")'
  run_once: true
  with_items: "{{ groups['secondary'] | default([]) }}"
  when: initialise|changed and item not in replcheck.stdout

